(function(){var en=Object.create;var ee=Object.defineProperty;var rn=Object.getOwnPropertyDescriptor;var tn=Object.getOwnPropertyNames;var nn=Object.getPrototypeOf,an=Object.prototype.hasOwnProperty;var on=function(e){return ee(e,"__esModule",{value:!0})};var l=function(e,r){return function(){return r||e((r={exports:{}}).exports,r),r.exports}};var ln=function(e,r,t){if(r&&typeof r=="object"||typeof r=="function")for(var n=tn(r),i=0,a=n.length,o;i<a;i++)o=n[i],!an.call(e,o)&&o!=="default"&&ee(e,o,{get:function(s){return r[s]}.bind(null,o),enumerable:!(t=rn(r,o))||t.enumerable});return e},sn=function(e){return ln(on(ee(e!=null?en(nn(e)):{},"default",e&&e.__esModule&&"default"in e?{get:function(){return e.default},enumerable:!0}:{value:e,enumerable:!0})),e)};var g=l(function(ka,Be){var M=function(e){return e&&e.Math==Math&&e};Be.exports=M(typeof globalThis=="object"&&globalThis)||M(typeof window=="object"&&window)||M(typeof self=="object"&&self)||M(typeof global=="object"&&global)||function(){return this}()||Function("return this")()});var b=l(function(Wa,Le){Le.exports=function(e){try{return!!e()}catch(r){return!0}}});var I=l(function(Ha,Fe){var un=b();Fe.exports=!un(function(){return Object.defineProperty({},1,{get:function(){return 7}})[1]!=7})});var We=l(function(ke){"use strict";var $e={}.propertyIsEnumerable,Ue=Object.getOwnPropertyDescriptor,cn=Ue&&!$e.call({1:2},1);ke.f=cn?function(r){var t=Ue(this,r);return!!t&&t.enumerable}:$e});var re=l(function(Ka,He){He.exports=function(e,r){return{enumerable:!(e&1),configurable:!(e&2),writable:!(e&4),value:r}}});var te=l(function(za,Ge){var fn={}.toString;Ge.exports=function(e){return fn.call(e).slice(8,-1)}});var ze=l(function(Xa,Ke){var vn=b(),dn=te(),pn="".split;Ke.exports=vn(function(){return!Object("z").propertyIsEnumerable(0)})?function(e){return dn(e)=="String"?pn.call(e,""):Object(e)}:Object});var P=l(function(Ya,Xe){Xe.exports=function(e){if(e==null)throw TypeError("Can't call method on "+e);return e}});var B=l(function(Ja,Ye){var gn=ze(),yn=P();Ye.exports=function(e){return gn(yn(e))}});var O=l(function(Za,Je){Je.exports=function(e){return typeof e=="object"?e!==null:typeof e=="function"}});var ne=l(function(Qa,Ze){var L=O();Ze.exports=function(e,r){if(!L(e))return e;var t,n;if(r&&typeof(t=e.toString)=="function"&&!L(n=t.call(e))||typeof(t=e.valueOf)=="function"&&!L(n=t.call(e))||!r&&typeof(t=e.toString)=="function"&&!L(n=t.call(e)))return n;throw TypeError("Can't convert object to primitive value")}});var ie=l(function(Va,Qe){var hn=P();Qe.exports=function(e){return Object(hn(e))}});var m=l(function(eo,Ve){var bn=ie(),xn={}.hasOwnProperty;Ve.exports=Object.hasOwn||function(r,t){return xn.call(bn(r),t)}});var tr=l(function(ro,rr){var mn=g(),er=O(),ae=mn.document,En=er(ae)&&er(ae.createElement);rr.exports=function(e){return En?ae.createElement(e):{}}});var oe=l(function(to,nr){var qn=I(),Sn=b(),wn=tr();nr.exports=!qn&&!Sn(function(){return Object.defineProperty(wn("div"),"a",{get:function(){return 7}}).a!=7})});var le=l(function(ar){var In=I(),Pn=We(),On=re(),jn=B(),Tn=ne(),_n=m(),Cn=oe(),ir=Object.getOwnPropertyDescriptor;ar.f=In?ir:function(r,t){if(r=jn(r),t=Tn(t,!0),Cn)try{return ir(r,t)}catch(n){}if(_n(r,t))return On(!Pn.f.call(r,t),r[t])}});var j=l(function(io,or){var Rn=O();or.exports=function(e){if(!Rn(e))throw TypeError(String(e)+" is not an object");return e}});var se=l(function(ur){var An=I(),Nn=oe(),lr=j(),Dn=ne(),sr=Object.defineProperty;ur.f=An?sr:function(r,t,n){if(lr(r),t=Dn(t,!0),lr(n),Nn)try{return sr(r,t,n)}catch(i){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(r[t]=n.value),r}});var q=l(function(oo,cr){var Mn=I(),Bn=se(),Ln=re();cr.exports=Mn?function(e,r,t){return Bn.f(e,r,Ln(1,t))}:function(e,r,t){return e[r]=t,e}});var F=l(function(lo,vr){var fr=g(),Fn=q();vr.exports=function(e,r){try{Fn(fr,e,r)}catch(t){fr[e]=r}return r}});var U=l(function(so,pr){var $n=g(),Un=F(),dr="__core-js_shared__",kn=$n[dr]||Un(dr,{});pr.exports=kn});var ce=l(function(uo,gr){var ue=U(),Wn=Function.toString;typeof ue.inspectSource!="function"&&(ue.inspectSource=function(e){return Wn.call(e)});gr.exports=ue.inspectSource});var br=l(function(co,hr){var Hn=g(),Gn=ce(),yr=Hn.WeakMap;hr.exports=typeof yr=="function"&&/native code/.test(Gn(yr))});var mr=l(function(fo,xr){xr.exports=!1});var k=l(function(vo,qr){var Kn=mr(),Er=U();(qr.exports=function(e,r){return Er[e]||(Er[e]=r!==void 0?r:{})})("versions",[]).push({version:"3.14.0",mode:Kn?"pure":"global",copyright:"\xA9 2021 Denis Pushkarev (zloirock.ru)"})});var fe=l(function(po,Sr){var zn=0,Xn=Math.random();Sr.exports=function(e){return"Symbol("+String(e===void 0?"":e)+")_"+(++zn+Xn).toString(36)}});var Pr=l(function(go,Ir){var Yn=k(),Jn=fe(),wr=Yn("keys");Ir.exports=function(e){return wr[e]||(wr[e]=Jn(e))}});var ve=l(function(yo,Or){Or.exports={}});var Rr=l(function(ho,Cr){var Zn=br(),Qn=g(),Vn=O(),ei=q(),de=m(),pe=U(),ri=Pr(),ti=ve(),jr="Object already initialized",ni=Qn.WeakMap,W,T,H,ii=function(e){return H(e)?T(e):W(e,{})},ai=function(e){return function(r){var t;if(!Vn(r)||(t=T(r)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return t}};Zn||pe.state?(x=pe.state||(pe.state=new ni),Tr=x.get,ge=x.has,_r=x.set,W=function(e,r){if(ge.call(x,e))throw new TypeError(jr);return r.facade=e,_r.call(x,e,r),r},T=function(e){return Tr.call(x,e)||{}},H=function(e){return ge.call(x,e)}):(E=ri("state"),ti[E]=!0,W=function(e,r){if(de(e,E))throw new TypeError(jr);return r.facade=e,ei(e,E,r),r},T=function(e){return de(e,E)?e[E]:{}},H=function(e){return de(e,E)});var x,Tr,ge,_r,E;Cr.exports={set:W,get:T,has:H,enforce:ii,getterFor:ai}});var ye=l(function(bo,Dr){var oi=g(),Ar=q(),li=m(),si=F(),ui=ce(),Nr=Rr(),ci=Nr.get,fi=Nr.enforce,vi=String(String).split("String");(Dr.exports=function(e,r,t,n){var i=n?!!n.unsafe:!1,a=n?!!n.enumerable:!1,o=n?!!n.noTargetGet:!1,s;if(typeof t=="function"&&(typeof r=="string"&&!li(t,"name")&&Ar(t,"name",r),s=fi(t),s.source||(s.source=vi.join(typeof r=="string"?r:""))),e===oi){a?e[r]=t:si(r,t);return}else i?!o&&e[r]&&(a=!0):delete e[r];a?e[r]=t:Ar(e,r,t)})(Function.prototype,"toString",function(){return typeof this=="function"&&ci(this).source||ui(this)})});var Br=l(function(xo,Mr){var di=g();Mr.exports=di});var xe=l(function(mo,Fr){var he=Br(),be=g(),Lr=function(e){return typeof e=="function"?e:void 0};Fr.exports=function(e,r){return arguments.length<2?Lr(he[e])||Lr(be[e]):he[e]&&he[e][r]||be[e]&&be[e][r]}});var _=l(function(Eo,$r){var pi=Math.ceil,gi=Math.floor;$r.exports=function(e){return isNaN(e=+e)?0:(e>0?gi:pi)(e)}});var me=l(function(qo,Ur){var yi=_(),hi=Math.min;Ur.exports=function(e){return e>0?hi(yi(e),9007199254740991):0}});var Wr=l(function(So,kr){var bi=_(),xi=Math.max,mi=Math.min;kr.exports=function(e,r){var t=bi(e);return t<0?xi(t+r,0):mi(t,r)}});var Kr=l(function(wo,Gr){var Ei=B(),qi=me(),Si=Wr(),Hr=function(e){return function(r,t,n){var i=Ei(r),a=qi(i.length),o=Si(n,a),s;if(e&&t!=t){for(;a>o;)if(s=i[o++],s!=s)return!0}else for(;a>o;o++)if((e||o in i)&&i[o]===t)return e||o||0;return!e&&-1}};Gr.exports={includes:Hr(!0),indexOf:Hr(!1)}});var Xr=l(function(Io,zr){var Ee=m(),wi=B(),Ii=Kr().indexOf,Pi=ve();zr.exports=function(e,r){var t=wi(e),n=0,i=[],a;for(a in t)!Ee(Pi,a)&&Ee(t,a)&&i.push(a);for(;r.length>n;)Ee(t,a=r[n++])&&(~Ii(i,a)||i.push(a));return i}});var Jr=l(function(Po,Yr){Yr.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]});var Qr=l(function(Zr){var Oi=Xr(),ji=Jr(),Ti=ji.concat("length","prototype");Zr.f=Object.getOwnPropertyNames||function(r){return Oi(r,Ti)}});var et=l(function(Vr){Vr.f=Object.getOwnPropertySymbols});var tt=l(function(To,rt){var _i=xe(),Ci=Qr(),Ri=et(),Ai=j();rt.exports=_i("Reflect","ownKeys")||function(r){var t=Ci.f(Ai(r)),n=Ri.f;return n?t.concat(n(r)):t}});var it=l(function(_o,nt){var Ni=m(),Di=tt(),Mi=le(),Bi=se();nt.exports=function(e,r){for(var t=Di(r),n=Bi.f,i=Mi.f,a=0;a<t.length;a++){var o=t[a];Ni(e,o)||n(e,o,i(r,o))}}});var ot=l(function(Co,at){var Li=b(),Fi=/#|\.prototype\./,C=function(e,r){var t=Ui[$i(e)];return t==Wi?!0:t==ki?!1:typeof r=="function"?Li(r):!!r},$i=C.normalize=function(e){return String(e).replace(Fi,".").toLowerCase()},Ui=C.data={},ki=C.NATIVE="N",Wi=C.POLYFILL="P";at.exports=C});var st=l(function(Ro,lt){var qe=g(),Hi=le().f,Gi=q(),Ki=ye(),zi=F(),Xi=it(),Yi=ot();lt.exports=function(e,r){var t=e.target,n=e.global,i=e.stat,a,o,s,u,f,v;if(n?o=qe:i?o=qe[t]||zi(t,{}):o=(qe[t]||{}).prototype,o)for(s in r){if(f=r[s],e.noTargetGet?(v=Hi(o,s),u=v&&v.value):u=o[s],a=Yi(n?s:t+(i?".":"#")+s,e.forced),!a&&u!==void 0){if(typeof f==typeof u)continue;Xi(f,u)}(e.sham||u&&u.sham)&&Gi(f,"sham",!0),Ki(o,s,f,e)}}});var ct=l(function(Ao,ut){"use strict";var Ji=j();ut.exports=function(){var e=Ji(this),r="";return e.global&&(r+="g"),e.ignoreCase&&(r+="i"),e.multiline&&(r+="m"),e.dotAll&&(r+="s"),e.unicode&&(r+="u"),e.sticky&&(r+="y"),r}});var dt=l(function(Se){"use strict";var ft=b();function vt(e,r){return RegExp(e,r)}Se.UNSUPPORTED_Y=ft(function(){var e=vt("a","y");return e.lastIndex=2,e.exec("abcd")!=null});Se.BROKEN_CARET=ft(function(){var e=vt("^r","gy");return e.lastIndex=2,e.exec("str")!=null})});var K=l(function(Do,ht){"use strict";var Zi=ct(),pt=dt(),Qi=k(),G=RegExp.prototype.exec,Vi=Qi("native-string-replace",String.prototype.replace),gt=G,we=function(){var e=/a/,r=/b*/g;return G.call(e,"a"),G.call(r,"a"),e.lastIndex!==0||r.lastIndex!==0}(),yt=pt.UNSUPPORTED_Y||pt.BROKEN_CARET,Ie=/()??/.exec("")[1]!==void 0,ea=we||Ie||yt;ea&&(gt=function(r){var t=this,n,i,a,o,s=yt&&t.sticky,u=Zi.call(t),f=t.source,v=0,c=r;return s&&(u=u.replace("y",""),u.indexOf("g")===-1&&(u+="g"),c=String(r).slice(t.lastIndex),t.lastIndex>0&&(!t.multiline||t.multiline&&r[t.lastIndex-1]!=="\n")&&(f="(?: "+f+")",c=" "+c,v++),i=new RegExp("^(?:"+f+")",u)),Ie&&(i=new RegExp("^"+f+"$(?!\\s)",u)),we&&(n=t.lastIndex),a=G.call(s?i:t,c),s?a?(a.input=a.input.slice(v),a[0]=a[0].slice(v),a.index=t.lastIndex,t.lastIndex+=a[0].length):t.lastIndex=0:we&&a&&(t.lastIndex=t.global?a.index+a[0].length:n),Ie&&a&&a.length>1&&Vi.call(a[0],i,function(){for(o=1;o<arguments.length-2;o++)arguments[o]===void 0&&(a[o]=void 0)}),a});ht.exports=gt});var Pe=l(function(){"use strict";var ra=st(),bt=K();ra({target:"RegExp",proto:!0,forced:/./.exec!==bt},{exec:bt})});var mt=l(function(Lo,xt){var ta=xe();xt.exports=ta("navigator","userAgent")||""});var It=l(function(Fo,wt){var na=g(),Oe=mt(),Et=na.process,qt=Et&&Et.versions,St=qt&&qt.v8,h,z;St?(h=St.split("."),z=h[0]<4?1:h[0]+h[1]):Oe&&(h=Oe.match(/Edge\/(\d+)/),(!h||h[1]>=74)&&(h=Oe.match(/Chrome\/(\d+)/),h&&(z=h[1])));wt.exports=z&&+z});var je=l(function($o,Ot){var Pt=It(),ia=b();Ot.exports=!!Object.getOwnPropertySymbols&&!ia(function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&Pt&&Pt<41})});var Tt=l(function(Uo,jt){var aa=je();jt.exports=aa&&!Symbol.sham&&typeof Symbol.iterator=="symbol"});var At=l(function(ko,Rt){var oa=g(),la=k(),_t=m(),sa=fe(),Ct=je(),ua=Tt(),R=la("wks"),A=oa.Symbol,ca=ua?A:A&&A.withoutSetter||sa;Rt.exports=function(e){return(!_t(R,e)||!(Ct||typeof R[e]=="string"))&&(Ct&&_t(A,e)?R[e]=A[e]:R[e]=ca("Symbol."+e)),R[e]}});var Ft=l(function(Wo,Lt){"use strict";Pe();var Nt=ye(),fa=K(),X=b(),Te=At(),va=q(),da=Te("species"),_e=RegExp.prototype,pa=!X(function(){var e=/./;return e.exec=function(){var r=[];return r.groups={a:"7"},r},"".replace(e,"$<a>")!=="7"}),Dt=function(){return"a".replace(/./,"$0")==="$0"}(),Mt=Te("replace"),Bt=function(){return/./[Mt]?/./[Mt]("a","$0")==="":!1}(),ga=!X(function(){var e=/(?:)/,r=e.exec;e.exec=function(){return r.apply(this,arguments)};var t="ab".split(e);return t.length!==2||t[0]!=="a"||t[1]!=="b"});Lt.exports=function(e,r,t,n){var i=Te(e),a=!X(function(){var c={};return c[i]=function(){return 7},""[e](c)!=7}),o=a&&!X(function(){var c=!1,d=/a/;return e==="split"&&(d={},d.constructor={},d.constructor[da]=function(){return d},d.flags="",d[i]=/./[i]),d.exec=function(){return c=!0,null},d[i](""),!c});if(!a||!o||e==="replace"&&!(pa&&Dt&&!Bt)||e==="split"&&!ga){var s=/./[i],u=t(i,""[e],function(c,d,y,N,S){var p=d.exec;return p===fa||p===_e.exec?a&&!S?{done:!0,value:s.call(d,y,N)}:{done:!0,value:c.call(y,d,N)}:{done:!1}},{REPLACE_KEEPS_$0:Dt,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:Bt}),f=u[0],v=u[1];Nt(String.prototype,e,f),Nt(_e,i,r==2?function(c,d){return v.call(c,this,d)}:function(c){return v.call(c,this)})}n&&va(_e[i],"sham",!0)}});var kt=l(function(Ho,Ut){var ya=_(),ha=P(),$t=function(e){return function(r,t){var n=String(ha(r)),i=ya(t),a=n.length,o,s;return i<0||i>=a?e?"":void 0:(o=n.charCodeAt(i),o<55296||o>56319||i+1===a||(s=n.charCodeAt(i+1))<56320||s>57343?e?n.charAt(i):o:e?n.slice(i,i+2):(o-55296<<10)+(s-56320)+65536)}};Ut.exports={codeAt:$t(!1),charAt:$t(!0)}});var Ht=l(function(Go,Wt){"use strict";var ba=kt().charAt;Wt.exports=function(e,r,t){return r+(t?ba(e,r).length:1)}});var Kt=l(function(Ko,Gt){var xa=ie(),ma=Math.floor,Ea="".replace,qa=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,Sa=/\$([$&'`]|\d{1,2})/g;Gt.exports=function(e,r,t,n,i,a){var o=t+e.length,s=n.length,u=Sa;return i!==void 0&&(i=xa(i),u=qa),Ea.call(a,u,function(f,v){var c;switch(v.charAt(0)){case"$":return"$";case"&":return e;case"`":return r.slice(0,t);case"'":return r.slice(o);case"<":c=i[v.slice(1,-1)];break;default:var d=+v;if(d===0)return f;if(d>s){var y=ma(d/10);return y===0?f:y<=s?n[y-1]===void 0?v.charAt(1):n[y-1]+v.charAt(1):f}c=n[d-1]}return c===void 0?"":c})}});var Xt=l(function(zo,zt){var wa=te(),Ia=K();zt.exports=function(e,r){var t=e.exec;if(typeof t=="function"){var n=t.call(e,r);if(typeof n!="object")throw TypeError("RegExp exec method returned something other than an Object or null");return n}if(wa(e)!=="RegExp")throw TypeError("RegExp#exec called on incompatible receiver");return Ia.call(e,r)}});var Yo=sn(Pe());"use strict";var Pa=Ft(),Oa=j(),ja=me(),Ta=_(),_a=P(),Ca=Ht(),Ra=Kt(),Aa=Xt(),Na=Math.max,Da=Math.min,Ma=function(e){return e===void 0?e:String(e)};Pa("replace",2,function(e,r,t,n){var i=n.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,a=n.REPLACE_KEEPS_$0,o=i?"$":"$0";return[function(u,f){var v=_a(this),c=u==null?void 0:u[e];return c!==void 0?c.call(u,v,f):r.call(String(v),u,f)},function(s,u){if(!i&&a||typeof u=="string"&&u.indexOf(o)===-1){var f=t(r,s,this,u);if(f.done)return f.value}var v=Oa(s),c=String(this),d=typeof u=="function";d||(u=String(u));var y=v.global;if(y){var N=v.unicode;v.lastIndex=0}for(var S=[];;){var p=Aa(v,c);if(p===null||(S.push(p),!y))break;var Vt=String(p[0]);Vt===""&&(v.lastIndex=Ca(c,ja(v.lastIndex),N))}for(var Ne="",D=0,Y=0;Y<S.length;Y++){p=S[Y];for(var J=String(p[0]),w=Na(Da(Ta(p.index),c.length),0),Z=[],Q=1;Q<p.length;Q++)Z.push(Ma(p[Q]));var V=p.groups;if(d){var De=[J].concat(Z,w,c);V!==void 0&&De.push(V);var Me=String(u.apply(void 0,De))}else Me=Ra(J,c,w,Z,V,u);w>=D&&(Ne+=c.slice(D,w)+Me,D=w+J.length)}return Ne+c.slice(D)}]});var Yt=400;function Ce(e,r){var t=0;if(e.nodeType===3){var n=e.nodeValue.replace(/\n/g,"").length;if(n>=r)return{element:e,offset:r};t+=n}else if(e.nodeType===1&&e.firstChild){var i=Ce(e.firstChild,r);if(i.element!==null)return i;t+=i.offset}return e.nextSibling?Ce(e.nextSibling,r-t):{element:null,offset:t}}function Re(e,r,t){for(var n=0,i=0;i<e.childNodes.length;i++){var a=e.childNodes[i];if(a.nodeType===3){for(var o=/\n/g,s=void 0;(s=o.exec(a.nodeValue))!==null;)if(n++,n===r)return Ce(a,s.index+t+1)}else if(a.nodeType===1){var u=Re(a,r-n,t);if(u.element!==null)return u;n+=u.offset}}return{element:null,offset:n}}function Ba(e,r){if(!!document.createRange){var t=document.getElementById("srcref_"+e);if(!t){t=document.createElement("span"),t.id="srcref_"+e;var n=e,i=document.getElementById(r.replace(/\./g,"_")+"_code");if(!i)return;var a=Re(i,n[0],n[4]),o=Re(i,n[2],n[5]);if(a.element===null||o.element===null)return;var s=document.createRange();a.element.parentNode.nodeName==="SPAN"&&a.element!==o.element?s.setStartBefore(a.element.parentNode):s.setStart(a.element,a.offset),o.element.parentNode.nodeName==="SPAN"&&a.element!==o.element?s.setEndAfter(o.element.parentNode):s.setEnd(o.element,o.offset),s.surroundContents(t)}$(t).stop(!0,!0).effect("highlight",null,1600)}}window.Shiny&&window.Shiny.addCustomMessageHandler("showcase-src",function(e){e.srcref&&e.srcfile&&Ba(e.srcref,e.srcfile)});var Ae=!1,Jt=function(r,t){var n=t?Yt:1,i=r?document.getElementById("showcase-sxs-code"):document.getElementById("showcase-code-inline"),a=r?document.getElementById("showcase-code-inline"):document.getElementById("showcase-sxs-code"),o=document.getElementById("showcase-app-metadata");if(o===null){var s=$("#showcase-well");r?s.fadeOut(n):s.fadeIn(n)}$(i).hide(),$(a).fadeOut(n,function(){var u=document.getElementById("showcase-code-tabs");a.removeChild(u),i.appendChild(u),r?Qt():document.getElementById("showcase-code-content").removeAttribute("style"),$(i).fadeIn(n),r||(document.getElementById("showcase-app-container").removeAttribute("style"),t&&$(document.body).animate({scrollTop:$(i).offset().top}));var f=document.getElementById("readme-md");f!==null&&(f.parentElement.removeChild(f),r?(a.appendChild(f),$(a).fadeIn(n)):document.getElementById("showcase-app-metadata").appendChild(f)),document.getElementById("showcase-code-position-toggle").innerHTML=r?'<i class="fa fa-level-down"></i> show below':'<i class="fa fa-level-up"></i> show with app'}),r&&$(document.body).animate({scrollTop:0},n),Ae=r,Zt(r&&t),$(window).trigger("resize")};function Zt(e){var r=960,t=r,n=1,i=document.getElementById("showcase-app-code").offsetWidth;i/2>r?t=i/2:i*.66>r?t=960:(t=i*.66,n=t/r);var a=document.getElementById("showcase-app-container");$(a).animate({width:t+"px",zoom:n*100+"%"},e?Yt:0)}var La=function(){Jt(!Ae,!0)},Fa=function(){document.body.offsetWidth>1350&&Jt(!0,!1)};function Qt(){document.getElementById("showcase-code-content").style.height=$(window).height()+"px"}function $a(){var e=document.getElementById("showcase-markdown-content");if(e!==null){var r=e.innerText||e.innerHTML,t=window.Showdown.converter;document.getElementById("readme-md").innerHTML=new t().makeHtml(r)}}$(window).resize(function(){Ae&&(Zt(!1),Qt())});window.toggleCodePosition=La;$(window).on("load",Fa);$(window).on("load",$a);window.hljs&&window.hljs.initHighlightingOnLoad();})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZmxhZ3MuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsICIuLi8uLi8uLi9zcmN0cy9zcmMvZXh0cmEvc2hpbnktc2hvd2Nhc2UudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tZ2xvYmFsLXRoaXMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAtLSBzYWZlXG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gZmFsbGJhY2tcbiAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pKCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsICJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwgInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBEZXRlY3QgSUU4J3MgaW5jb21wbGV0ZSBkZWZpbmVQcm9wZXJ0eSBpbXBsZW1lbnRhdGlvblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsICJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwgInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsICJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG4gIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsICIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwgIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCAibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCAidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCAidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCAidmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaGFzT3duIHx8IGZ1bmN0aW9uIGhhc093bihpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHRvT2JqZWN0KGl0KSwga2V5KTtcbn07XG4iLCAidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCAidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWllZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCAidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwgInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCAidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/ICRkZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsICJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwgInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwgInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwgInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGBjb3JlLWpzQDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCAidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UoV2Vha01hcCkpO1xuIiwgIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCAidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMTQuMCcsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnXHUwMEE5IDIwMjEgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsICJ2YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG4iLCAidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwgIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCAidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCA9ICdPYmplY3QgYWxyZWFkeSBpbml0aWFsaXplZCc7XG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgdmFyIHdtZ2V0ID0gc3RvcmUuZ2V0O1xuICB2YXIgd21oYXMgPSBzdG9yZS5oYXM7XG4gIHZhciB3bXNldCA9IHN0b3JlLnNldDtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmICh3bWhhcy5jYWxsKHN0b3JlLCBpdCkpIHRocm93IG5ldyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIHdtc2V0LmNhbGwoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMuY2FsbChzdG9yZSwgaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAob2JqZWN0SGFzKGl0LCBTVEFURSkpIHRocm93IG5ldyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsICJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIHZhciBzdGF0ZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgfVxuICAgIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpO1xuICAgIGlmICghc3RhdGUuc291cmNlKSB7XG4gICAgICBzdGF0ZS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG4gICAgfVxuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSk7XG4iLCAidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCAidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsICJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsICJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCAidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsICJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuICBpbmRleE9mOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwgInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwgIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwgInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwgIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCAidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwgInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsICJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsICJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3Ncbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC5kb3RBbGwpIHJlc3VsdCArPSAncyc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL2ZhaWxzJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgnYScsICd5JykgLT4gL2EveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yLFxuLy8gc28gd2UgdXNlIGFuIGludGVybWVkaWF0ZSBmdW5jdGlvbi5cbmZ1bmN0aW9uIFJFKHMsIGYpIHtcbiAgcmV0dXJuIFJlZ0V4cChzLCBmKTtcbn1cblxuZXhwb3J0cy5VTlNVUFBPUlRFRF9ZID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxuICB2YXIgcmUgPSBSRSgnYScsICd5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdhYmNkJykgIT0gbnVsbDtcbn0pO1xuXG5leHBvcnRzLkJST0tFTl9DQVJFVCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzczNjg3XG4gIHZhciByZSA9IFJFKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT0gbnVsbDtcbn0pO1xuIiwgIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby1hc3NlcnRpb24tY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAsIHJlZ2V4cC9uby1sYXp5LWVuZHMgLS0gdGVzdGluZyAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLXVzZWxlc3MtcXVhbnRpZmllciAtLSB0ZXN0aW5nICovXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vc2hhcmVkJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xudmFyIG5hdGl2ZVJlcGxhY2UgPSBzaGFyZWQoJ25hdGl2ZS1zdHJpbmctcmVwbGFjZScsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWSB8fCBzdGlja3lIZWxwZXJzLkJST0tFTl9DQVJFVDtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQgfHwgVU5TVVBQT1JURURfWTtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG4gICAgdmFyIHN0aWNreSA9IFVOU1VQUE9SVEVEX1kgJiYgcmUuc3RpY2t5O1xuICAgIHZhciBmbGFncyA9IHJlZ2V4cEZsYWdzLmNhbGwocmUpO1xuICAgIHZhciBzb3VyY2UgPSByZS5zb3VyY2U7XG4gICAgdmFyIGNoYXJzQWRkZWQgPSAwO1xuICAgIHZhciBzdHJDb3B5ID0gc3RyO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgZmxhZ3MgPSBmbGFncy5yZXBsYWNlKCd5JywgJycpO1xuICAgICAgaWYgKGZsYWdzLmluZGV4T2YoJ2cnKSA9PT0gLTEpIHtcbiAgICAgICAgZmxhZ3MgKz0gJ2cnO1xuICAgICAgfVxuXG4gICAgICBzdHJDb3B5ID0gU3RyaW5nKHN0cikuc2xpY2UocmUubGFzdEluZGV4KTtcbiAgICAgIC8vIFN1cHBvcnQgYW5jaG9yZWQgc3RpY2t5IGJlaGF2aW9yLlxuICAgICAgaWYgKHJlLmxhc3RJbmRleCA+IDAgJiYgKCFyZS5tdWx0aWxpbmUgfHwgcmUubXVsdGlsaW5lICYmIHN0cltyZS5sYXN0SW5kZXggLSAxXSAhPT0gJ1xcbicpKSB7XG4gICAgICAgIHNvdXJjZSA9ICcoPzogJyArIHNvdXJjZSArICcpJztcbiAgICAgICAgc3RyQ29weSA9ICcgJyArIHN0ckNvcHk7XG4gICAgICAgIGNoYXJzQWRkZWQrKztcbiAgICAgIH1cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBzdHIgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14oPzonICsgc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgfVxuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHN0aWNreSA/IHJlQ29weSA6IHJlLCBzdHJDb3B5KTtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBtYXRjaC5pbnB1dCA9IG1hdGNoLmlucHV0LnNsaWNlKGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaC5pbmRleCA9IHJlLmxhc3RJbmRleDtcbiAgICAgICAgcmUubGFzdEluZGV4ICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIH0gZWxzZSByZS5sYXN0SW5kZXggPSAwO1xuICAgIH0gZWxzZSBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZS5sYXN0SW5kZXggPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5leGVjYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS5leGVjXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcbiIsICJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCAidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4O1xudmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5pZiAodjgpIHtcbiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpO1xuICB2ZXJzaW9uID0gbWF0Y2hbMF0gPCA0ID8gMSA6IG1hdGNoWzBdICsgbWF0Y2hbMV07XG59IGVsc2UgaWYgKHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9IG1hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbiAmJiArdmVyc2lvbjtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gcmVxdWlyZWQgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gYGdldC1vd24tcHJvcGVydHktc3ltYm9sc2AgcG9seWZpbGwgc3ltYm9scyBjb252ZXJ0ZWQgdG8gb2JqZWN0IGFyZSBub3QgU3ltYm9sIGluc3RhbmNlc1xuICByZXR1cm4gIVN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8XG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gICYmICFTeW1ib2wuc2hhbVxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwgInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXMoV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSB8fCAhKE5BVElWRV9TWU1CT0wgfHwgdHlwZW9mIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9PSAnc3RyaW5nJykpIHtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXMoU3ltYm9sLCBuYW1lKSkge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gICAgfVxuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwgIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxuLy8gSUUgPD0gMTEgcmVwbGFjZXMgJDAgd2l0aCB0aGUgd2hvbGUgbWF0Y2gsIGFzIGlmIGl0IHdhcyAkJlxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjAyNDY2Ni9nZXR0aW5nLWllLXRvLXJlcGxhY2UtYS1yZWdleC13aXRoLXRoZS1saXRlcmFsLXN0cmluZy0wXG52YXIgUkVQTEFDRV9LRUVQU18kMCA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvcHJlZmVyLWVzY2FwZS1yZXBsYWNlbWVudC1kb2xsYXItY2hhciAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gJ2EnLnJlcGxhY2UoLy4vLCAnJDAnKSA9PT0gJyQwJztcbn0pKCk7XG5cbnZhciBSRVBMQUNFID0gd2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG4vLyBTYWZhcmkgPD0gMTMuMC4zKD8pIHN1YnN0aXR1dGVzIG50aCBjYXB0dXJlIHdoZXJlIG4+bSB3aXRoIGFuIGVtcHR5IHN0cmluZ1xudmFyIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKC8uL1tSRVBMQUNFXSkge1xuICAgIHJldHVybiAvLi9bUkVQTEFDRV0oJ2EnLCAnJDAnKSA9PT0gJyc7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSkoKTtcblxuLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4vLyBXZWV4IEpTIGhhcyBmcm96ZW4gYnVpbHQtaW4gcHJvdG90eXBlcywgc28gdXNlIHRyeSAvIGNhdGNoIHdyYXBwZXJcbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCAhPT0gMiB8fCByZXN1bHRbMF0gIT09ICdhJyB8fCByZXN1bHRbMV0gIT09ICdiJztcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYywgc2hhbSkge1xuICB2YXIgU1lNQk9MID0gd2VsbEtub3duU3ltYm9sKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG5cbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgcmVhbCByZWdleCBoZXJlIHNpbmNlIGl0IGNhdXNlcyBkZW9wdGltaXphdGlvblxuICAgICAgLy8gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb24gaW4gVjhcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMDZcbiAgICAgIHJlID0ge307XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgICByZS5mbGFncyA9ICcnO1xuICAgICAgcmVbU1lNQk9MXSA9IC8uL1tTWU1CT0xdO1xuICAgIH1cblxuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcblxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSk7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICEoXG4gICAgICBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyAmJlxuICAgICAgUkVQTEFDRV9LRUVQU18kMCAmJlxuICAgICAgIVJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFXG4gICAgKSkgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgbWV0aG9kcyA9IGV4ZWMoU1lNQk9MLCAnJ1tLRVldLCBmdW5jdGlvbiAobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgIHZhciAkZXhlYyA9IHJlZ2V4cC5leGVjO1xuICAgICAgaWYgKCRleGVjID09PSByZWdleHBFeGVjIHx8ICRleGVjID09PSBSZWdFeHBQcm90b3R5cGUuZXhlYykge1xuICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9LCB7XG4gICAgICBSRVBMQUNFX0tFRVBTXyQwOiBSRVBMQUNFX0tFRVBTXyQwLFxuICAgICAgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkU6IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFXG4gICAgfSk7XG4gICAgdmFyIHN0cmluZ01ldGhvZCA9IG1ldGhvZHNbMF07XG4gICAgdmFyIHJlZ2V4TWV0aG9kID0gbWV0aG9kc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyaW5nTWV0aG9kKTtcbiAgICByZWRlZmluZShSZWdFeHBQcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcmVnZXhNZXRob2QuY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByZWdleE1ldGhvZC5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG5cbiAgaWYgKHNoYW0pIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShSZWdFeHBQcm90b3R5cGVbU1lNQk9MXSwgJ3NoYW0nLCB0cnVlKTtcbn07XG4iLCAidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBjb2RlUG9pbnRBdCwgYXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG4gIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcblxuLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsICJ2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgcmVwbGFjZSA9ICcnLnJlcGxhY2U7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJidgXXxcXGR7MSwyfXw8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCYnYF18XFxkezEsMn0pL2c7XG5cbi8vIGBHZXRTdWJzdGl0dXRpb25gIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgfVxuICByZXR1cm4gcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgdmFyIGNhcHR1cmU7XG4gICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgIGNhc2UgJzwnOlxuICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgfSk7XG59O1xuIiwgInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9jbGFzc29mLXJhdycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuXG4gIHJldHVybiByZWdleHBFeGVjLmNhbGwoUiwgUyk7XG59O1xuXG4iLCAiaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanNcIjtcbnZhciBhbmltYXRlTXMgPSA0MDA7IC8vIEdpdmVuIGEgRE9NIG5vZGUgYW5kIGEgY29sdW1uIChjb3VudCBvZiBjaGFyYWN0ZXJzKSwgd2FsayByZWN1cnNpdmVseVxuLy8gdGhyb3VnaCB0aGUgbm9kZSdzIHNpYmxpbmdzIGNvdW50aW5nIGNoYXJhY3RlcnMgdW50aWwgdGhlIGdpdmVuIG51bWJlclxuLy8gb2YgY2hhcmFjdGVycyBoYXZlIGJlZW4gZm91bmQuXG4vL1xuLy8gSWYgdGhlIGdpdmVuIGNvdW50IGlzIGJpZ2dlciB0aGFuIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjb250YWluZWQgYnlcbi8vIHRoZSBub2RlIGFuZCBpdHMgc2libGluZ3MsIHJldHVybnMgYSBudWxsIG5vZGUgYW5kIHRoZSBudW1iZXIgb2Zcbi8vIGNoYXJhY3RlcnMgZm91bmQuXG5cbmZ1bmN0aW9uIGZpbmRUZXh0Q29sUG9pbnQobm9kZSwgY29sKSB7XG4gIHZhciBjb2xzID0gMDtcblxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgIHZhciBuY2hhciA9IG5vZGUubm9kZVZhbHVlLnJlcGxhY2UoL1xcbi9nLCBcIlwiKS5sZW5ndGg7XG5cbiAgICBpZiAobmNoYXIgPj0gY29sKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVtZW50OiBub2RlLFxuICAgICAgICBvZmZzZXQ6IGNvbFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29scyArPSBuY2hhcjtcbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBub2RlLmZpcnN0Q2hpbGQpIHtcbiAgICB2YXIgcmV0ID0gZmluZFRleHRDb2xQb2ludChub2RlLmZpcnN0Q2hpbGQsIGNvbCk7XG5cbiAgICBpZiAocmV0LmVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbHMgKz0gcmV0Lm9mZnNldDtcbiAgICB9XG4gIH1cblxuICBpZiAobm9kZS5uZXh0U2libGluZykgcmV0dXJuIGZpbmRUZXh0Q29sUG9pbnQobm9kZS5uZXh0U2libGluZywgY29sIC0gY29scyk7ZWxzZSByZXR1cm4ge1xuICAgIGVsZW1lbnQ6IG51bGwsXG4gICAgb2Zmc2V0OiBjb2xzXG4gIH07XG59IC8vIFJldHVybnMgYW4gb2JqZWN0IGluZGljYXRpbmcgdGhlIGVsZW1lbnQgY29udGFpbmluZyB0aGUgZ2l2ZW4gbGluZSBhbmRcbi8vIGNvbHVtbiBvZiB0ZXh0LCBhbmQgdGhlIG9mZnNldCBpbnRvIHRoYXQgZWxlbWVudCB3aGVyZSB0aGUgdGV4dCB3YXMgZm91bmQuXG4vL1xuLy8gSWYgdGhlIGdpdmVuIGxpbmUgYW5kIGNvbHVtbiBhcmUgbm90IGZvdW5kLCByZXR1cm5zIGEgbnVsbCBlbGVtZW50IGFuZFxuLy8gdGhlIG51bWJlciBvZiBsaW5lcyBmb3VuZC5cblxuXG5mdW5jdGlvbiBmaW5kVGV4dFBvaW50KGVsLCBsaW5lLCBjb2wpIHtcbiAgdmFyIG5ld2xpbmVzID0gMDtcblxuICBmb3IgKHZhciBjaGlsZElkID0gMDsgY2hpbGRJZCA8IGVsLmNoaWxkTm9kZXMubGVuZ3RoOyBjaGlsZElkKyspIHtcbiAgICB2YXIgY2hpbGQgPSBlbC5jaGlsZE5vZGVzW2NoaWxkSWRdOyAvLyBJZiB0aGlzIGlzIGEgdGV4dCBub2RlLCBjb3VudCB0aGUgbnVtYmVyIG9mIG5ld2xpbmVzIGl0IGNvbnRhaW5zLlxuXG4gICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAvLyBURVhUX05PREVcbiAgICAgIHZhciBuZXdsaW5lcmUgPSAvXFxuL2c7XG4gICAgICB2YXIgbWF0Y2ggPSB2b2lkIDA7XG5cbiAgICAgIHdoaWxlICgobWF0Y2ggPSBuZXdsaW5lcmUuZXhlYyhjaGlsZC5ub2RlVmFsdWUpKSAhPT0gbnVsbCkge1xuICAgICAgICBuZXdsaW5lcysrOyAvLyBGb3VuZCB0aGUgZGVzaXJlZCBsaW5lLCBub3cgZmluZCB0aGUgY29sdW1uLlxuXG4gICAgICAgIGlmIChuZXdsaW5lcyA9PT0gbGluZSkge1xuICAgICAgICAgIHJldHVybiBmaW5kVGV4dENvbFBvaW50KGNoaWxkLCBtYXRjaC5pbmRleCArIGNvbCArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBJZiB0aGlzIGlzIG5vdCBhIHRleHQgbm9kZSwgZGVzY2VuZCByZWN1cnNpdmVseSB0byBzZWUgaG93IG1hbnlcbiAgICAvLyBsaW5lcyBpdCBjb250YWlucy5cbiAgICBlbHNlIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAvLyBFTEVNRU5UX05PREVcbiAgICAgICAgdmFyIHJldCA9IGZpbmRUZXh0UG9pbnQoY2hpbGQsIGxpbmUgLSBuZXdsaW5lcywgY29sKTtcbiAgICAgICAgaWYgKHJldC5lbGVtZW50ICE9PSBudWxsKSByZXR1cm4gcmV0O2Vsc2UgbmV3bGluZXMgKz0gcmV0Lm9mZnNldDtcbiAgICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZWxlbWVudDogbnVsbCxcbiAgICBvZmZzZXQ6IG5ld2xpbmVzXG4gIH07XG59IC8vIERyYXcgYSBoaWdobGlnaHQgZWZmZWN0IGZvciB0aGUgZ2l2ZW4gc291cmNlIHJlZi4gc3JjcmVmIGlzIGFzc3VtZWQgdG8gYmVcbi8vIGFuIGludGVnZXIgYXJyYXkgb2YgbGVuZ3RoIDYsIGZvbGxvd2luZyB0aGUgc3RhbmRhcmQgUiBmb3JtYXQgZm9yIHNvdXJjZVxuLy8gcmVmcy5cblxuXG5mdW5jdGlvbiBoaWdobGlnaHRTcmNyZWYoc3JjcmVmLCBzcmNmaWxlKSB7XG4gIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0ZXh0IHJhbmdlcyAoSUU4IGRvZXNuJ3QpXG4gIGlmICghZG9jdW1lbnQuY3JlYXRlUmFuZ2UpIHJldHVybjsgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIGFscmVhZHkgaGF2ZSBhIG1hcmtlciBmb3IgdGhpcyBzb3VyY2UgcmVmXG5cbiAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcmNyZWZfXCIgKyBzcmNyZWYpO1xuXG4gIGlmICghZWwpIHtcbiAgICAvLyBXZSBkb24ndCBoYXZlIGEgbWFya2VyLCBjcmVhdGUgb25lXG4gICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBlbC5pZCA9IFwic3JjcmVmX1wiICsgc3JjcmVmO1xuICAgIHZhciByZWYgPSBzcmNyZWY7XG4gICAgdmFyIGNvZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzcmNmaWxlLnJlcGxhY2UoL1xcLi9nLCBcIl9cIikgKyBcIl9jb2RlXCIpOyAvLyBpZiB0aGVyZSBpcyBubyBjb2RlIGZpbGUgKG1pZ2h0IGJlIGEgc2hpbnkgZmlsZSksIHF1aXQgZWFybHlcblxuICAgIGlmICghY29kZSkgcmV0dXJuO1xuICAgIHZhciBzdGFydCA9IGZpbmRUZXh0UG9pbnQoY29kZSwgcmVmWzBdLCByZWZbNF0pO1xuICAgIHZhciBlbmQgPSBmaW5kVGV4dFBvaW50KGNvZGUsIHJlZlsyXSwgcmVmWzVdKTsgLy8gSWYgdGhlIGluc2VydGlvbiBwb2ludCBjYW4ndCBiZSBmb3VuZCwgYmFpbCBvdXQgbm93XG5cbiAgICBpZiAoc3RhcnQuZWxlbWVudCA9PT0gbnVsbCB8fCBlbmQuZWxlbWVudCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7IC8vIElmIHRoZSB0ZXh0IHBvaW50cyBhcmUgaW5zaWRlIGRpZmZlcmVudCA8U1BBTj5zLCB3ZSBtYXkgbm90IGJlIGFibGUgdG9cbiAgICAvLyBzdXJyb3VuZCB0aGVtIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgdGhlIGVsZW1lbnRzIHRvIGtlZXAgdGhlIERPTSB0cmVlXG4gICAgLy8gaW50YWN0LiBKdXN0IG1vdmUgdGhlIHNlbGVjdGlvbiBwb2ludHMgdG8gZW5jb21wYXNzIHRoZSBjb250ZW50cyBvZlxuICAgIC8vIHRoZSBTUEFOcy5cblxuICAgIGlmIChzdGFydC5lbGVtZW50LnBhcmVudE5vZGUubm9kZU5hbWUgPT09IFwiU1BBTlwiICYmIHN0YXJ0LmVsZW1lbnQgIT09IGVuZC5lbGVtZW50KSB7XG4gICAgICByYW5nZS5zZXRTdGFydEJlZm9yZShzdGFydC5lbGVtZW50LnBhcmVudE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYW5nZS5zZXRTdGFydChzdGFydC5lbGVtZW50LCBzdGFydC5vZmZzZXQpO1xuICAgIH1cblxuICAgIGlmIChlbmQuZWxlbWVudC5wYXJlbnROb2RlLm5vZGVOYW1lID09PSBcIlNQQU5cIiAmJiBzdGFydC5lbGVtZW50ICE9PSBlbmQuZWxlbWVudCkge1xuICAgICAgcmFuZ2Uuc2V0RW5kQWZ0ZXIoZW5kLmVsZW1lbnQucGFyZW50Tm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlLnNldEVuZChlbmQuZWxlbWVudCwgZW5kLm9mZnNldCk7XG4gICAgfVxuXG4gICAgcmFuZ2Uuc3Vycm91bmRDb250ZW50cyhlbCk7XG4gIH0gLy8gRW5kIGFueSBwcmV2aW91cyBoaWdobGlnaHQgYmVmb3JlIHN0YXJ0aW5nIHRoaXMgb25lXG5cblxuICAkKGVsKS5zdG9wKHRydWUsIHRydWUpLmVmZmVjdChcImhpZ2hsaWdodFwiLCBudWxsLCAxNjAwKTtcbn0gLy8gSWYgdGhpcyBpcyB0aGUgbWFpbiBTaGlueSB3aW5kb3csIHdpcmUgdXAgb3VyIGN1c3RvbSBtZXNzYWdlIGhhbmRsZXIuXG4vLyBUT0RPLWJhcnJldCwgdGhpcyBzaG91bGQgd29ya1xuXG5cbmlmICh3aW5kb3cuU2hpbnkpIHtcbiAgd2luZG93LlNoaW55LmFkZEN1c3RvbU1lc3NhZ2VIYW5kbGVyKFwic2hvd2Nhc2Utc3JjXCIsIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2Uuc3JjcmVmICYmIG1lc3NhZ2Uuc3JjZmlsZSkge1xuICAgICAgaGlnaGxpZ2h0U3JjcmVmKG1lc3NhZ2Uuc3JjcmVmLCBtZXNzYWdlLnNyY2ZpbGUpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBpc0NvZGVBYm92ZSA9IGZhbHNlO1xuXG52YXIgc2V0Q29kZVBvc2l0aW9uID0gZnVuY3Rpb24gc2V0Q29kZVBvc2l0aW9uKGFib3ZlLCBhbmltYXRlKSB7XG4gIHZhciBhbmltYXRlQ29kZU1zID0gYW5pbWF0ZSA/IGFuaW1hdGVNcyA6IDE7IC8vIHNldCB0aGUgc291cmNlIGFuZCB0YXJnZXRzIGZvciB0aGUgdGFiIG1vdmVcblxuICB2YXIgbmV3SG9zdEVsZW1lbnQgPSBhYm92ZSA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2hvd2Nhc2Utc3hzLWNvZGVcIikgOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNob3djYXNlLWNvZGUtaW5saW5lXCIpO1xuICB2YXIgY3VycmVudEhvc3RFbGVtZW50ID0gYWJvdmUgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNob3djYXNlLWNvZGUtaW5saW5lXCIpIDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaG93Y2FzZS1zeHMtY29kZVwiKTtcbiAgdmFyIG1ldGFkYXRhRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2hvd2Nhc2UtYXBwLW1ldGFkYXRhXCIpO1xuXG4gIGlmIChtZXRhZGF0YUVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAvLyBpZiB0aGVyZSdzIG5vIGFwcCBtZXRhZGF0YSwgc2hvdyBhbmQgaGlkZSB0aGUgZW50aXJlIHdlbGwgY29udGFpbmVyXG4gICAgLy8gd2hlbiB0aGUgY29kZSBjaGFuZ2VzIHBvc2l0aW9uXG4gICAgdmFyIHdlbGxFbGVtZW50ID0gJChcIiNzaG93Y2FzZS13ZWxsXCIpO1xuXG4gICAgaWYgKGFib3ZlKSB7XG4gICAgICB3ZWxsRWxlbWVudC5mYWRlT3V0KGFuaW1hdGVDb2RlTXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3ZWxsRWxlbWVudC5mYWRlSW4oYW5pbWF0ZUNvZGVNcyk7XG4gICAgfVxuICB9IC8vIGhpZGUgdGhlIG5ldyBlbGVtZW50IGJlZm9yZSBkb2luZyBhbnl0aGluZyB0byBpdFxuXG5cbiAgJChuZXdIb3N0RWxlbWVudCkuaGlkZSgpO1xuICAkKGN1cnJlbnRIb3N0RWxlbWVudCkuZmFkZU91dChhbmltYXRlQ29kZU1zLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRhYnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNob3djYXNlLWNvZGUtdGFic1wiKTtcbiAgICBjdXJyZW50SG9zdEVsZW1lbnQucmVtb3ZlQ2hpbGQodGFicyk7XG4gICAgbmV3SG9zdEVsZW1lbnQuYXBwZW5kQ2hpbGQodGFicyk7IC8vIHJlbW92ZSBvciBzZXQgdGhlIGhlaWdodCBvZiB0aGUgY29kZVxuXG4gICAgaWYgKGFib3ZlKSB7XG4gICAgICBzZXRDb2RlSGVpZ2h0RnJvbURvY0hlaWdodCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNob3djYXNlLWNvZGUtY29udGVudFwiKS5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgICB9XG5cbiAgICAkKG5ld0hvc3RFbGVtZW50KS5mYWRlSW4oYW5pbWF0ZUNvZGVNcyk7XG5cbiAgICBpZiAoIWFib3ZlKSB7XG4gICAgICAvLyByZW1vdmUgdGhlIGFwcGxpZWQgd2lkdGggYW5kIHpvb20gb24gdGhlIGFwcCBjb250YWluZXIsIGFuZFxuICAgICAgLy8gc2Nyb2xsIHNtb290aGx5IGRvd24gdG8gdGhlIGNvZGUncyBuZXcgaG9tZVxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaG93Y2FzZS1hcHAtY29udGFpbmVyXCIpLnJlbW92ZUF0dHJpYnV0ZShcInN0eWxlXCIpO1xuICAgICAgaWYgKGFuaW1hdGUpICQoZG9jdW1lbnQuYm9keSkuYW5pbWF0ZSh7XG4gICAgICAgIHNjcm9sbFRvcDogJChuZXdIb3N0RWxlbWVudCkub2Zmc2V0KCkudG9wXG4gICAgICB9KTtcbiAgICB9IC8vIGlmIHRoZXJlJ3MgYSByZWFkbWUsIG1vdmUgaXQgZWl0aGVyIGFsb25nc2lkZSB0aGUgY29kZSBvciBiZW5lYXRoXG4gICAgLy8gdGhlIGFwcFxuXG5cbiAgICB2YXIgcmVhZG1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZWFkbWUtbWRcIik7XG5cbiAgICBpZiAocmVhZG1lICE9PSBudWxsKSB7XG4gICAgICByZWFkbWUucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChyZWFkbWUpO1xuXG4gICAgICBpZiAoYWJvdmUpIHtcbiAgICAgICAgY3VycmVudEhvc3RFbGVtZW50LmFwcGVuZENoaWxkKHJlYWRtZSk7XG4gICAgICAgICQoY3VycmVudEhvc3RFbGVtZW50KS5mYWRlSW4oYW5pbWF0ZUNvZGVNcyk7XG4gICAgICB9IGVsc2UgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaG93Y2FzZS1hcHAtbWV0YWRhdGFcIikuYXBwZW5kQ2hpbGQocmVhZG1lKTtcbiAgICB9IC8vIGNoYW5nZSB0aGUgdGV4dCBvbiB0aGUgdG9nZ2xlIGJ1dHRvbiB0byByZWZsZWN0IHRoZSBuZXcgc3RhdGVcblxuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaG93Y2FzZS1jb2RlLXBvc2l0aW9uLXRvZ2dsZVwiKS5pbm5lckhUTUwgPSBhYm92ZSA/ICc8aSBjbGFzcz1cImZhIGZhLWxldmVsLWRvd25cIj48L2k+IHNob3cgYmVsb3cnIDogJzxpIGNsYXNzPVwiZmEgZmEtbGV2ZWwtdXBcIj48L2k+IHNob3cgd2l0aCBhcHAnO1xuICB9KTtcblxuICBpZiAoYWJvdmUpIHtcbiAgICAkKGRvY3VtZW50LmJvZHkpLmFuaW1hdGUoe1xuICAgICAgc2Nyb2xsVG9wOiAwXG4gICAgfSwgYW5pbWF0ZUNvZGVNcyk7XG4gIH1cblxuICBpc0NvZGVBYm92ZSA9IGFib3ZlO1xuICBzZXRBcHBDb2RlU3hzV2lkdGhzKGFib3ZlICYmIGFuaW1hdGUpO1xuICAkKHdpbmRvdykudHJpZ2dlcihcInJlc2l6ZVwiKTtcbn07XG5cbmZ1bmN0aW9uIHNldEFwcENvZGVTeHNXaWR0aHMoYW5pbWF0ZSkge1xuICB2YXIgYXBwVGFyZ2V0V2lkdGggPSA5NjA7XG4gIHZhciBhcHBXaWR0aCA9IGFwcFRhcmdldFdpZHRoO1xuICB2YXIgem9vbSA9IDEuMDtcbiAgdmFyIHRvdGFsV2lkdGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNob3djYXNlLWFwcC1jb2RlXCIpLm9mZnNldFdpZHRoO1xuXG4gIGlmICh0b3RhbFdpZHRoIC8gMiA+IGFwcFRhcmdldFdpZHRoKSB7XG4gICAgLy8gSWYgdGhlIGFwcCBjYW4gdXNlIG9ubHkgaGFsZiB0aGUgYXZhaWxhYmxlIHNwYWNlIGFuZCBzdGlsbCBtZWV0IGl0c1xuICAgIC8vIHRhcmdldCwgdGFrZSBoYWxmIHRoZSBhdmFpbGFibGUgc3BhY2UuXG4gICAgYXBwV2lkdGggPSB0b3RhbFdpZHRoIC8gMjtcbiAgfSBlbHNlIGlmICh0b3RhbFdpZHRoICogMC42NiA+IGFwcFRhcmdldFdpZHRoKSB7XG4gICAgLy8gSWYgdGhlIGFwcCBjYW4gbWVldCBpdHMgdGFyZ2V0IGJ5IHRha2luZyB1cCBtb3JlIHNwYWNlICh1cCB0byA2NiVcbiAgICAvLyBvZiBpdHMgY29udGFpbmVyKSwgdGFrZSB1cCBtb3JlIHNwYWNlLlxuICAgIGFwcFdpZHRoID0gOTYwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRoZSBzcGFjZSBpcyB0b28gbmFycm93IGZvciB0aGUgYXBwIGFuZCBjb2RlIHRvIGxpdmUgc2lkZS1ieS1zaWRlXG4gICAgLy8gaW4gYSBmcmllbmRseSB3YXkuIEtlZXAgdGhlIGFwcCBhdCAyLzMgb2YgdGhlIHNwYWNlIGJ1dCBzY2FsZSBpdC5cbiAgICBhcHBXaWR0aCA9IHRvdGFsV2lkdGggKiAwLjY2O1xuICAgIHpvb20gPSBhcHBXaWR0aCAvIGFwcFRhcmdldFdpZHRoO1xuICB9XG5cbiAgdmFyIGFwcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2hvd2Nhc2UtYXBwLWNvbnRhaW5lclwiKTtcbiAgJChhcHApLmFuaW1hdGUoe1xuICAgIHdpZHRoOiBhcHBXaWR0aCArIFwicHhcIixcbiAgICB6b29tOiB6b29tICogMTAwICsgXCIlXCJcbiAgfSwgYW5pbWF0ZSA/IGFuaW1hdGVNcyA6IDApO1xufVxuXG52YXIgdG9nZ2xlQ29kZVBvc2l0aW9uID0gZnVuY3Rpb24gdG9nZ2xlQ29kZVBvc2l0aW9uKCkge1xuICBzZXRDb2RlUG9zaXRpb24oIWlzQ29kZUFib3ZlLCB0cnVlKTtcbn07IC8vIGlmIHRoZSBicm93c2VyIGlzIHNpemVkIHRvIHdpZGVyIHRoYW4gMTM1MHB4LCBzaG93IHRoZSBjb2RlIG5leHQgdG8gdGhlXG4vLyBhcHAgYnkgZGVmYXVsdFxuXG5cbnZhciBzZXRJbml0aWFsQ29kZVBvc2l0aW9uID0gZnVuY3Rpb24gc2V0SW5pdGlhbENvZGVQb3NpdGlvbigpIHtcbiAgaWYgKGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggPiAxMzUwKSB7XG4gICAgc2V0Q29kZVBvc2l0aW9uKHRydWUsIGZhbHNlKTtcbiAgfVxufTsgLy8gbWFrZSB0aGUgY29kZSBzY3JvbGxhYmxlIHRvIGFib3V0IHRoZSBoZWlnaHQgb2YgdGhlIGJyb3dzZXIsIGxlc3Mgc3BhY2Vcbi8vIGZvciB0aGUgdGFic1xuXG5cbmZ1bmN0aW9uIHNldENvZGVIZWlnaHRGcm9tRG9jSGVpZ2h0KCkge1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNob3djYXNlLWNvZGUtY29udGVudFwiKS5zdHlsZS5oZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCkgKyBcInB4XCI7XG59IC8vIGlmIHRoZXJlJ3MgYSBibG9jayBvZiBtYXJrZG93biBjb250ZW50LCByZW5kZXIgaXQgdG8gSFRNTFxuXG5cbmZ1bmN0aW9uIHJlbmRlck1hcmtkb3duKCkge1xuICB2YXIgbWRDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaG93Y2FzZS1tYXJrZG93bi1jb250ZW50XCIpO1xuXG4gIGlmIChtZENvbnRlbnQgIT09IG51bGwpIHtcbiAgICAvLyBJRTggcHV0cyB0aGUgY29udGVudCBvZiA8c2NyaXB0PiB0YWdzIGludG8gaW5uZXJIVE1MIGJ1dFxuICAgIC8vIG5vdCBpbm5lclRleHRcbiAgICB2YXIgY29udGVudCA9IG1kQ29udGVudC5pbm5lclRleHQgfHwgbWRDb250ZW50LmlubmVySFRNTDtcbiAgICB2YXIgc2hvd2Rvd25Db252ZXJ0ZXIgPSB3aW5kb3cuU2hvd2Rvd24uY29udmVydGVyO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVhZG1lLW1kXCIpLmlubmVySFRNTCA9IG5ldyBzaG93ZG93bkNvbnZlcnRlcigpLm1ha2VIdG1sKGNvbnRlbnQpO1xuICB9XG59XG5cbiQod2luZG93KS5yZXNpemUoZnVuY3Rpb24gKCkge1xuICBpZiAoaXNDb2RlQWJvdmUpIHtcbiAgICBzZXRBcHBDb2RlU3hzV2lkdGhzKGZhbHNlKTtcbiAgICBzZXRDb2RlSGVpZ2h0RnJvbURvY0hlaWdodCgpO1xuICB9XG59KTtcbndpbmRvdy50b2dnbGVDb2RlUG9zaXRpb24gPSB0b2dnbGVDb2RlUG9zaXRpb247XG4kKHdpbmRvdykub24oXCJsb2FkXCIsIHNldEluaXRpYWxDb2RlUG9zaXRpb24pO1xuJCh3aW5kb3cpLm9uKFwibG9hZFwiLCByZW5kZXJNYXJrZG93bik7XG5pZiAod2luZG93LmhsanMpIHdpbmRvdy5obGpzLmluaXRIaWdobGlnaHRpbmdPbkxvYWQoKTtcbmV4cG9ydCB7fTsiLCAiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKFJFUExBQ0UsIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSwgcmVhc29uKSB7XG4gIHZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IHJlYXNvbi5SRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRTtcbiAgdmFyIFJFUExBQ0VfS0VFUFNfJDAgPSByZWFzb24uUkVQTEFDRV9LRUVQU18kMDtcbiAgdmFyIFVOU0FGRV9TVUJTVElUVVRFID0gUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPyAnJCcgOiAnJDAnO1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciByZXBsYWNlciA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIHJlcGxhY2VyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyByZXBsYWNlci5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogbmF0aXZlUmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICBpZiAoXG4gICAgICAgICghUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgJiYgUkVQTEFDRV9LRUVQU18kMCkgfHxcbiAgICAgICAgKHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdzdHJpbmcnICYmIHJlcGxhY2VWYWx1ZS5pbmRleE9mKFVOU0FGRV9TVUJTVElUVVRFKSA9PT0gLTEpXG4gICAgICApIHtcbiAgICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVSZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuXG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcblxuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuXG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG59KTtcbiJdLAogICJtYXBwaW5ncyI6ICI4dkJBQUEsMkJBQUksR0FBUSxTQUFVLEVBQUksQ0FDeEIsTUFBTyxJQUFNLEVBQUcsTUFBUSxNQUFRLEdBSWxDLEdBQU8sUUFFTCxFQUFNLE1BQU8sYUFBYyxVQUFZLGFBQ3ZDLEVBQU0sTUFBTyxTQUFVLFVBQVksU0FFbkMsRUFBTSxNQUFPLE9BQVEsVUFBWSxPQUNqQyxFQUFNLE1BQU8sU0FBVSxVQUFZLFNBRWxDLFVBQVksQ0FBRSxNQUFPLFVBQWMsU0FBUyxtQkNiL0MsMkJBQU8sUUFBVSxTQUFVLEVBQU0sQ0FDL0IsR0FBSSxDQUNGLE1BQU8sQ0FBQyxDQUFDLFVBQ0YsRUFBUCxDQUNBLE1BQU8sT0NKWCwyQkFBSSxJQUFRLElBR1osR0FBTyxRQUFVLENBQUMsR0FBTSxVQUFZLENBRWxDLE1BQU8sUUFBTyxlQUFlLEdBQUksRUFBRyxDQUFFLElBQUssVUFBWSxDQUFFLE1BQU8sTUFBUSxJQUFNLE1DTGhGLG1DQUNBLEdBQUksSUFBd0IsR0FBRyxxQkFF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
