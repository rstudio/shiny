% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/otel.R
\name{with_ospan_async}
\alias{with_ospan_async}
\title{Execute code within an OpenTelemetry span for asynchronous operations}
\usage{
with_ospan_async(
  name,
  expr,
  ...,
  attributes = NULL,
  domain = getDefaultReactiveDomain()
)
}
\arguments{
\item{name}{Character string. The name of the span.}

\item{expr}{An expression to evaluate within the span context.}

\item{...}{Additional arguments passed to \code{start_ospan()}.}

\item{domain}{The reactive domain to associate with the span. Defaults to
the current reactive domain from \code{getDefaultReactiveDomain()}.}
}
\value{
The result of evaluating \code{expr}. If \code{expr} returns a promise,
the span will be automatically ended when the promise completes.
}
\description{
Creates an OpenTelemetry span and executes the given expression within it.
This function is designed to handle both synchronous and asynchronous
(promise-based) operations. For promises, the span is automatically ended
when the promise resolves or rejects.
}
\details{
This function differs from synchronous span operations in that it installs
a promise domain and properly handles asynchronous operations. The span
will be ended either when the function exits (for synchronous operations)
or when a returned promise completes (for asynchronous operations).
}
\examples{
\dontrun{
# Synchronous operation
result <- with_ospan_async("my_operation", {
  # ... do some work ...
  42
})

# Asynchronous operation
promise <- with_ospan_async("async_operation", {
  # ... return a promise ...
  some_async_function()
})
}

}
\seealso{
\code{\link{start_ospan}} for manual span control,
\code{\link{with_existing_ospan_async}} for using existing spans
}
\keyword{internal}
