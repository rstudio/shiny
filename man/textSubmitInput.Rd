% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input-textsubmit.R
\name{textSubmitInput}
\alias{textSubmitInput}
\title{Create a textarea input control with explicit submission}
\usage{
textSubmitInput(
  inputId,
  placeholder,
  value = "",
  ...,
  button = NULL,
  width = NULL,
  submitKey = c("enter", "enter+modifier")
)
}
\arguments{
\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{placeholder}{A character string giving the user a hint as to what can
be entered into the control.}

\item{value}{The initial input text. Note that, unlike \code{\link[=textAreaInput]{textAreaInput()}},
this won't set a server-side value until the value is submitted.}

\item{...}{Ignored, included to require named arguments and for future
feature expansion.}

\item{button}{A \link{tags} element to use for the submit button. It's recommended
that this be a \code{\link[bslib:input_task_button]{bslib::input_task_button()}} since it will automatically
provide a busy indicator (and disable) until the next flush occurs. Note
also that if the submit button launches a \link{ExtendedTask}, this button can
also be bound to the task (\code{\link[bslib:bind_task_button]{bslib::bind_task_button()}}) and/or manually
updated for more accurate progress reporting
(\code{\link[bslib:input_task_button]{bslib::update_task_button()}}).}

\item{width}{The width of the input, e.g. \code{'400px'}, or \code{'100\%'};
see \code{\link[=validateCssUnit]{validateCssUnit()}}.}

\item{submitKey}{A character string indicating what keyboard event should
trigger the submit button. The default is \code{enter}, which will submit the
input when the user presses the Enter/Return key. The \code{enter+modifier}
option will submit the input when the user presses the Enter key while
holding down Ctrl/Cmd.}
}
\value{
A textarea input control that can be added to a UI definition.
}
\description{
Creates a textarea input where users can enter multi-line text and submit
their input using a dedicated button or keyboard shortcut. This control is
ideal when you want to capture finalized input, rather than reacting to every
keystroke, making it useful for chat boxes, comments, or other scenarios
where users may compose and review their text before submitting.
}
\section{Server value}{

A character string of the text input. The default value is \code{""} even if
\code{value} is provided. The value will only be set/updated when the user submits
the input by pressing the Enter key or clicking the submit button.
}

\examples{
## Only run examples in interactive R sessions
if (interactive()) {

  ui <- fluidPage(
    textSubmitInput("text", "Enter some input..."),
    verbatimTextOutput("value")
  )
  server <- function(input, output) {
    output$value <- renderText({
      req(input$text)
      Sys.sleep(2)
      paste("You entered:", input$text)
    })
  }
  shinyApp(ui, server)

}

}
\seealso{
\code{\link[=updateTextSubmitInput]{updateTextSubmitInput()}}, \code{\link[=textAreaInput]{textAreaInput()}}, \code{\link[bslib:input_task_button]{bslib::input_task_button()}}

Other input elements: 
\code{\link{actionButton}()},
\code{\link{checkboxGroupInput}()},
\code{\link{checkboxInput}()},
\code{\link{dateInput}()},
\code{\link{dateRangeInput}()},
\code{\link{fileInput}()},
\code{\link{numericInput}()},
\code{\link{passwordInput}()},
\code{\link{radioButtons}()},
\code{\link{selectInput}()},
\code{\link{sliderInput}()},
\code{\link{submitButton}()},
\code{\link{textAreaInput}()},
\code{\link{textInput}()},
\code{\link{varSelectInput}()}
}
\concept{input elements}
