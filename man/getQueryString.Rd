% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/history.R
\name{getQueryString}
\alias{getQueryString}
\title{Get the parsed query string from the URL}
\usage{
getQueryString(session)
}
\arguments{
\item{session}{The current Shiny session.}
}
\value{
A named list such \code{?param1=value1&param2=value2}
  becomes \code{list(param1 = value1, param2 = value2)}
}
\description{
A user friendly wrapper for getting and parsing the query
string from the app's URL.
}
\examples{
## Only run this example in interactive R sessions
if (interactive()) {

  ## App 1: Doing "live" bookmarking
  shinyApp(
    ui = fluidPage(
      textInput("txt", "Enter new query string"),
      helpText("Format: ?param1=val1&param2=val2"),
      actionButton("go", "Update"),
      hr(),
      verbatimTextOutput("query")
    ),
    server = function(input, output, session) {
      observeEvent(input$go, {
        updateQueryString(input$txt, mode = "push")
      })
      output$query <- renderText({
        query <- getQueryString(session)
        queryText <- paste(names(query), query,
                       sep = "=", collapse=", ")
        paste("Your query string is:\\n", queryText)
      })
    }
  )

  ## App 2: Using the query string to decide which
  ## content to display (could also be implemented
  ## using conditionalPanel)
  shinyApp(
    ui = fluidPage(
      textInput("txt", "Enter new query string"),
      helpText("Format: ?param1=val1&param2=val2"),
      actionButton("go", "Update"),
      hr(),
      verbatimTextOutput("query")
    ),
    server = function(input, output, session) {
      observeEvent(input$go, {
        updateQueryString(input$txt, mode = "push")
      })
      output$query <- renderText({
        query <- getQueryString(session)
        queryText <- paste(names(query), query,
                       sep = "=", collapse=", ")
        paste("Your query string is:\\n", queryText)
      })
    }
  )
}
}
\seealso{
\code{\link{updateQueryString}},
  \code{\link{getUrlHash}}
}

