% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input-textsubmit.R
\name{updateTextSubmitInput}
\alias{updateTextSubmitInput}
\title{Change the value of a text submit input on the client}
\usage{
updateTextSubmitInput(
  session,
  inputId,
  value = NULL,
  placeholder = NULL,
  submit = FALSE,
  focus = FALSE
)
}
\arguments{
\item{session}{The \code{session} object passed to function given to
\code{shinyServer}. Default is \code{getDefaultReactiveDomain()}.}

\item{inputId}{The id of the input object.}

\item{value}{The value to set the user input to.}

\item{placeholder}{The placeholder text for the user input.}

\item{submit}{Whether to automatically submit the text for the user. Requires \code{value}.}

\item{focus}{Whether to move focus to the input element. Requires \code{value}.}

\item{label}{The label to set for the input object.}
}
\description{
Change the value of a text submit input on the client
}
\details{
The input updater functions send a message to the client, telling it to
change the settings of an input object. The messages are collected and sent
after all the observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the
inputs in the first place. For example, \code{\link{numericInput}()} and
\code{updateNumericInput()} take a similar set of arguments.

Any arguments with NULL values will be ignored; they will not result in any
changes to the input object on the client.

For \code{\link{radioButtons}()}, \code{\link{checkboxGroupInput}()} and
\code{\link{selectInput}()}, the set of choices can be cleared by using
\code{choices=character(0)}. Similarly, for these inputs, the selected item
can be cleared by using \code{selected=character(0)}.
}
\examples{
## Only run examples in interactive R sessions
if (interactive()) {

  ui <- fluidPage(
   sliderInput("controller", "Controller", 0, 20, 10),
   textSubmitInput("inText", "Input text"),
   textSubmitInput("inText2", "Input text 2")
  )

  server <- function(input, output, session) {
   observe({
     # We'll use the input$controller variable multiple times, so save it as x
     # for convenience.
     x <- input$controller

     # This will change the value of input$inText, based on x
     updateTextSubmitInput(session, "inText", value = paste("New text", x))

     # Can also set the label, this time for input$inText2
     updateTextSubmitInput(
       session, "inText2",
       label = paste("New label", x),
       value = paste("New text", x)
      )
    })
  }

  shinyApp(ui, server)
}

}
\seealso{
\code{\link[=textSubmitInput]{textSubmitInput()}}
}
