% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootstrap-layout.R, R/bootstrap.R
\name{fluidPage}
\alias{fluidPage}
\alias{fixedPage}
\alias{bootstrapPage}
\alias{basicPage}
\title{Create a Bootstrap UI page container}
\usage{
fluidPage(..., title = NULL, theme = NULL, lang = NULL)

fixedPage(..., title = NULL, theme = NULL, lang = NULL)

bootstrapPage(..., title = NULL, theme = NULL, lang = NULL)

basicPage(...)
}
\arguments{
\item{...}{UI elements (i.e., \link{tags}).}

\item{title}{The browser window title (defaults to the host URL of the page).
Can also be set as a side effect of the \code{\link[=titlePanel]{titlePanel()}} function.}

\item{theme}{One of the following:
\itemize{
\item \code{NULL} (the default), which implies a "stock" build of Bootstrap 3.
\item A \code{\link[bslib:bs_theme]{bslib::bs_theme()}} object. This can be used to replace a stock
build of Bootstrap 3 with a customized version of Bootstrap 3 or higher.
\item A character string pointing to an alternative Bootstrap stylesheet
(normally a css file within the www directory, e.g. \code{www/bootstrap.css}).
This option is here mainly for legacy reasons.
}}

\item{lang}{ISO 639-1 language code for the HTML page, such as "en" or "ko".
This will be used as the lang in the \verb{<html>} tag, as in \verb{<html lang="en">}.
The default (NULL) results in an empty string.}
}
\value{
A UI definition (i.e., a \link{tags} object) that can be passed to \code{\link[=shinyApp]{shinyApp()}}.
}
\description{
Create a user interface (UI) page container based on
\href{https://getbootstrap.com/}{Bootstrap}'s CSS and JavaScript. Most Shiny apps
should use \code{\link[=fluidPage]{fluidPage()}} (or \code{\link[=navbarPage]{navbarPage()}}) to get a page container with a
responsive page width, but in some cases you may want a fixed width container
(\code{fixedPage()}) or just a bare \verb{<body>} container (\code{bootstrapPage()}).

Most Shiny apps make use of other Shiny UI functions for \href{https://shiny.rstudio.com/articles/layout-guide.html}{managing layout} (e.g.,
\code{\link[=sidebarLayout]{sidebarLayout()}}, \code{\link[=fluidRow]{fluidRow()}}, etc), navigation (e.g., \code{\link[=tabPanel]{tabPanel()}}), and
other styling (e.g., \code{\link[=wellPanel]{wellPanel()}}, \code{\link[=inputPanel]{inputPanel()}}).  A good portion of these
Shiny UI functions require Bootstrap to work properly (so most Shiny apps
should use these functions to start their UI definitions), but more advanced
usage (i.e., custom HTML/CSS/JS) can avoid Bootstrap entirely by using
\code{\link[=htmlTemplate]{htmlTemplate()}} and/or HTML \link{tags}.
}
\examples{

# First create some UI content.
# See the layout guide to learn more about creating different layouts
# https://shiny.rstudio.com/articles/layout-guide.html
ui <- sidebarLayout(
  sidebarPanel(sliderInput("obs", "Number of observations:", 0, 1000, 500)),
  mainPanel(plotOutput("distPlot"))
)
server <- function(input, output) {
  output$distPlot <- renderPlot(hist(rnorm(input$obs)))
}

# Demonstrating difference between fluidPage(), fixedPage(), bootstrapPage()
if (interactive()) {
  # Container width scales _fluidly_ with window size
  shinyApp(fluidPage(ui), server)
  # Container width changes with window size at fixed breakpoints
  shinyApp(fixedPage(ui), server)
  # Container width is equal to the window's width
  shinyApp(bootstrapPage(ui), server)
}

# The default look is provided by Bootstrap 3, but {bslib} can be
# used to customize the Bootstrap version and its default styling
theme <- bslib::bs_theme(
  version = 5,
  bg = "#101010",
  fg = "#FDF7F7",
  primary = "#ED79F9",
  base_font = bslib::font_google("Prompt"),
  code_font = bslib::font_google("JetBrains Mono")
)
if (interactive()) {
  # Call thematic::thematic_shiny(font = "auto") to automatically
  # translate the theme/CSS to the R plot
  shinyApp(
    fluidPage(ui, theme = theme, title = "Hello Bootstrap 5"),
    server
  )
}

}
\seealso{
\code{\link[=navbarPage]{navbarPage()}}, \code{\link[=fillPage]{fillPage()}}, \code{\link[=column]{column()}}, \code{\link[=tabPanel]{tabPanel()}}
}
