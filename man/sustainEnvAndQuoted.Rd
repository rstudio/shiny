% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-lang.R
\name{sustainEnvAndQuoted}
\alias{sustainEnvAndQuoted}
\title{Convert expressions and quosures to a function}
\usage{
sustainEnvAndQuoted(q, x, env, quoted, verbose = TRUE)
}
\arguments{
\item{q}{Quosure of the expression \code{x}. When capturing expressions to create
your quosure, it is recommended to use \code{\link[=enquo0]{enquo0()}} to not unquote the
object too early. See \code{\link[=enquo0]{enquo0()}} for more details.}

\item{x}{An expression. This value is only used to validate if the raw
expression is a \code{\link[=quo]{quo()}}sure that was not \code{\link[=inject]{inject()}}ed.}

\item{env}{An environment. This is provided for backward compatibility. If
the calling environment is not \code{\link[=missing]{missing()}} the variable used for \code{env},
then the quosure \code{q} will have its environment set to \code{env}.}

\item{quoted}{A logical indicating whether or not \code{env} is quoted. This is
provided for backward compatibility. If the calling environment is not
\code{\link[=missing]{missing()}} the variable used for \code{quoted}, then the quosure \code{q} will set
its expression to its internal quoted value.}
}
\description{
\code{sustainEnvAndQuoted()} and \code{quoToFunction()} are meant to be used together in a
\code{render} function, to capture user expressions or quosures and convert them
to functions. They are meant to replace the older functions
\code{\link[=installExprFunction]{installExprFunction()}} and \code{\link[=exprToFunction]{exprToFunction()}} (although those functions will continue
to work in the future, they will not work with quosures). See the examples in \code{\link[=installExprFunction]{installExprFunction()}} for
information on how to migrate to \code{sustainEnvAndQuoted()} and \code{quoToFunction()}.
}
\details{
Although \code{sustainEnvAndQuoted()} can take \code{env} and \code{quoted} parameters, it is
recommended that they not be used, except for backward compatibility.
The recommended usage of \code{sustainEnvAndQuoted()} and \code{quoToFunction()} does not
include use of the \code{env} and \code{quoted} parameters. If it is necessary to
use quoted expressions and/or custom environments for evaluating, it can be
done with quosures and \code{\link[rlang:inject]{rlang::inject()}}. The examples below demonstrate how
to do this.

If you are updating from \code{\link[=installExprFunction]{installExprFunction()}} or \code{\link[=exprToFunction]{exprToFunction()}} to
these functions, see the examples in the documentation for the old functions
for how to migrate them. It is strongly recommended to use \code{\link[=enquo0]{enquo0()}} to create
the quosure as to not immediately evaluate the quosure.

Note, like \code{\link[=installExprFunction]{installExprFunction()}} and \code{\link[=exprToFunction]{exprToFunction()}},
\code{\link[=sustainEnvAndQuoted]{sustainEnvAndQuoted()}} must be called in similar locations as the method
\emph{reaches} up into the calling environments to check for information. This is
one of the \strong{big reasons} why a single \code{quosure} object should be made as soon
as possible and passed down into the lower render functions. By using
quosures, less \emph{magic} has to be performed by package authors to avoid
prematurely evaluating user expression outside of the \code{env} context and manually handling quoted
expressions from one layer to the next.
}
\section{Migration}{


\code{env} and \code{quoted} should be set to \code{\link[=deprecated]{deprecated()}} to signal to users and package authors
that the parameters should not be used (if possible). For example:\if{html}{\out{<div class="r">}}\preformatted{library(lifecycle)
renderTriple <- function(x, env = deprecated(), quoted = deprecated()) \{
  q <- rlang::enquo0(x)
  q <- sustainEnvAndQuoted(q, x, env, quoted)
  func <- quoToFunction(q)
  # Use `func` like normal...
  createRenderFunction(func, transform = function(value, ...) \{
    paste(rep(value, 3), collapse=", ")
  \}, outputFunc = textOutput)
\}
}\if{html}{\out{</div>}}

Ideally, once \code{env} and \code{quoted} are no longer needed, they can be removed when creating the render function.\if{html}{\out{<div class="r">}}\preformatted{renderTriple <- function(x) \{
  func <- quoToFunction(rlang::enquo0(x))
  # Use `func` like normal...
  createRenderFunction(func, transform = function(value, ...) \{
    paste(rep(value, 3), collapse=", ")
  \}, outputFunc = textOutput)
\}
}\if{html}{\out{</div>}}

Optionally, package authors could throw an error if the parameters are supplied.\if{html}{\out{<div class="r">}}\preformatted{library(lifecycle)
renderTriple <- function(x, env = deprecated(), quoted = deprecated()) \{
  if (is_present(env))
    deprecate_stop("1.7.0", "shinyEx::renderTriple(env = )",
                   details = "To use `env`, please `inject()` a quosure to `x`")
  if (is_present(quoted))
    deprecate_stop("1.7.0", "shinyEx::renderTriple(quoted = )",
                   details = "Please use a quosure instead")
  func <- quoToFunction(rlang::enquo0(x))
  # Use `func` like normal...
  createRenderFunction(func, transform = function(value, ...) \{
    paste(rep(value, 3), collapse=", ")
  \}, outputFunc = textOutput)
\}
}\if{html}{\out{</div>}}
}

\section{\code{shinyRenderWidget()}}{


The \code{\link[htmlwidgets:htmlwidgets-shiny]{htmlwidgets::shinyRenderWidget()}} function is a wrapper around \code{sustainEnvAndQuoted()} and \code{quoToFunction()}.
Package authors should try their best to \strong{only} provide a quosure to \code{shinyRenderWiget(expr=)}.

Previously, widget authors were recommended to force quoting of the \code{expr}.\if{html}{\out{<div class="r">}}\preformatted{# shiny render function for a widget named 'foo'
renderFoo <- function(expr, env = parent.frame(), quoted = FALSE) \{
  if (!quoted) \{ expr <- substitute(expr) \} # force quoted
  htmlwidgets::shinyRenderWidget(expr, fooOutput, env, quoted = TRUE)
\}
}\if{html}{\out{</div>}}

Now, widget authors can capture the \code{expr} immedately with a quosure using \code{\link[=enquo0]{enquo0()}} and still support \code{env} and \code{quoted} with \code{sustainEnvAndQuoted()}. When passing the quosure to \code{\link[htmlwidgets:htmlwidgets-shiny]{htmlwidgets::shinyRenderWidget()}}, do not provide \code{env} and \code{quoted} as
\code{q} encapsulates \code{env} and \code{quoted} information.\if{html}{\out{<div class="r">}}\preformatted{library(lifecycle)
# shiny render function for a widget named 'foo'
renderFoo <- function(expr, env = deprecated(), quoted = deprecated()) \{
  q <- enquo0(expr)
  q <- sustainEnvAndQuoted(q, expr, env, quoted)
  htmlwidgets::shinyRenderWidget(q, fooOutput)
\}
}\if{html}{\out{</div>}}
}

\examples{
# Three versions of the same example renderer, similar to `renderText()`.
# This is something that toolkit authors will do.

# Shiny <= 1.6.0; No quosure support.
renderTriplePre <- function(x, env = parent.frame(), quoted = FALSE) {
  # Create `func` from the expression `x`, `env`, and `quoted`
  func <- exprToFunction(x, env, quoted)

  # Wrap up func, with another function which takes the value of func()
  # and modifies it.
  createRenderFunction(
    func,
    transform = function(value, session, name, ...) {
      paste(rep(value, 3), collapse=", ")
    },
    # The outputFunc can be used by rmarkdown shiny apps to automatically
    # generate outputs.
    outputFunc = textOutput
  )
}

# Shiny >= 1.7.0; Support quosures; Supports `env` and `quoted`.
library(lifecycle)
renderTripleSustain <- function(x, env = deprecated(), quoted = deprecated()) {
  # Capture the quosure of `x`
  q <- enquo0(x)
  # Possibly handle the environment and quoted parameters
  q <- sustainEnvAndQuoted(q, x, env, quoted)
  # Create the `func` from the quosure `q`
  func <- quoToFunction(q)

  # (Same as above)
  createRenderFunction(
    func,
    transform = function(value, session, name, ...) { paste(rep(value, 3), collapse=", ") },
    outputFunc = textOutput
  )
}

# Shiny >= 1.7.0; Ideal code; Does not involve `env` or `quoted`
renderTripleIdeal <- function(x) {
  # Capture the quosure of `x` without automatic unquoting
  # and turn it into a function
  func <- quoToFunction(enquo0(x))

  # (Same as above)
  createRenderFunction(
    func,
    transform = function(value, session, name, ...) { paste(rep(value, 3), collapse=", ") },
    outputFunc = textOutput
  )
}


# Example of using the renderer.
# This is something that app authors will do.
values <- reactiveValues(A="text", B="text")

\dontrun{
# Create an output object
output$tripleA <- renderTripleIdeal({
  values$A
})
# Create an output object
output$tripleB <- renderTripleSustain({
  values$B
})
}

# At the R console, you can experiment with the renderer using `isolate()`
tripleA <- renderTripleIdeal({
  values$A
})

isolate(tripleA())
# "text, text, text"


# If you want to use a quoted expression, use `rlang::inject()`.
q <- quote({ values$A })
tripleA <- rlang::inject(renderTripleIdeal(!!q))
isolate(tripleA())

# `rlang::inject()` also works with `sustainEnvAndQuoted()`.
tripleS <- rlang::inject(renderTripleSustain(!!q))
isolate(tripleS())
# "text, text, text"

# Capturing an expression and an environment, using a quosure and `rlang::inject()`:
e <- new.env()
e$vals <- reactiveValues(A = "hello", B = "world")
# Create a quosure that captures both the expression and environment.
myquo <- rlang::new_quosure(quote({ vals$A }), env = e)
tripleA <- rlang::inject(renderTripleIdeal(!!myquo))
isolate(tripleA())
# "hello, hello, hello"

# Using a quoted expression and environment without quosures
expr <- quote({ vals$B })
tripleB <- renderTripleSustain(expr, env = e, quoted = TRUE)
isolate(tripleB())

# Using an `inject()`ed quosure with either `env` or `quoted` throws an error
try(
  inject(renderTripleSustain(!!myquo, quoted = FALSE))
)
try(
  inject(renderTripleSustain(!!myquo, env = quo_get_env(my_quo)))
)

}
