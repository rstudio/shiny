{
  "version": 3,
  "sources": ["../../../srcts/extras/shiny-showcase.ts"],
  "sourcesContent": ["/* eslint-disable unicorn/filename-case */\nimport \"./globalShiny\";\n\ntype ShowcaseSrcMessage = {\n  srcref: number[];\n  srcfile: string;\n};\n\nconst animateMs = 400;\n\n// Given a DOM node and a column (count of characters), walk recursively\n// through the node's siblings counting characters until the given number\n// of characters have been found.\n//\n// If the given count is bigger than the number of characters contained by\n// the node and its siblings, returns a null node and the number of\n// characters found.\nfunction findTextColPoint(node: Node, col: number) {\n  let cols = 0;\n\n  if (node.nodeType === 3) {\n    const nchar = node.nodeValue.replace(/\\n/g, \"\").length;\n\n    if (nchar >= col) {\n      return { element: node, offset: col };\n    } else {\n      cols += nchar;\n    }\n  } else if (node.nodeType === 1 && node.firstChild) {\n    const ret = findTextColPoint(node.firstChild, col);\n\n    if (ret.element !== null) {\n      return ret;\n    } else {\n      cols += ret.offset;\n    }\n  }\n  if (node.nextSibling) return findTextColPoint(node.nextSibling, col - cols);\n  else return { element: null, offset: cols };\n}\n\n// Returns an object indicating the element containing the given line and\n// column of text, and the offset into that element where the text was found.\n//\n// If the given line and column are not found, returns a null element and\n// the number of lines found.\nfunction findTextPoint(el: Node, line: number, col: number) {\n  let newlines = 0;\n\n  for (let childId = 0; childId < el.childNodes.length; childId++) {\n    const child = el.childNodes[childId];\n    // If this is a text node, count the number of newlines it contains.\n\n    if (child.nodeType === 3) {\n      // TEXT_NODE\n      const newlinere = /\\n/g;\n      let match: ReturnType<RegExp[\"exec\"]>;\n\n      while ((match = newlinere.exec(child.nodeValue)) !== null) {\n        newlines++;\n        // Found the desired line, now find the column.\n        if (newlines === line) {\n          return findTextColPoint(child, match.index + col + 1);\n        }\n      }\n    }\n    // If this is not a text node, descend recursively to see how many\n    // lines it contains.\n    else if (child.nodeType === 1) {\n      // ELEMENT_NODE\n      const ret = findTextPoint(child, line - newlines, col);\n\n      if (ret.element !== null) return ret;\n      else newlines += ret.offset;\n    }\n  }\n  return { element: null, offset: newlines };\n}\n\n// Draw a highlight effect for the given source ref. srcref is assumed to be\n// an integer array of length 6, following the standard R format for source\n// refs.\nfunction highlightSrcref(\n  srcref: ShowcaseSrcMessage[\"srcref\"],\n  srcfile: ShowcaseSrcMessage[\"srcfile\"]\n) {\n  // Check to see if the browser supports text ranges (IE8 doesn't)\n  if (!document.createRange) return;\n\n  // Check to see if we already have a marker for this source ref\n  let el = document.getElementById(\"srcref_\" + srcref);\n\n  if (!el) {\n    // We don't have a marker, create one\n    el = document.createElement(\"span\");\n    el.id = \"srcref_\" + srcref;\n    const ref = srcref;\n    const code = document.getElementById(srcfile.replace(/\\./g, \"_\") + \"_code\");\n    // if there is no code file (might be a shiny file), quit early\n\n    if (!code) return;\n    const start = findTextPoint(code, ref[0], ref[4]);\n    const end = findTextPoint(code, ref[2], ref[5]);\n\n    // If the insertion point can't be found, bail out now\n    if (start.element === null || end.element === null) return;\n\n    const range = document.createRange();\n    // If the text points are inside different <SPAN>s, we may not be able to\n    // surround them without breaking apart the elements to keep the DOM tree\n    // intact. Just move the selection points to encompass the contents of\n    // the SPANs.\n\n    if (\n      start.element.parentNode.nodeName === \"SPAN\" &&\n      start.element !== end.element\n    ) {\n      range.setStartBefore(start.element.parentNode);\n    } else {\n      range.setStart(start.element, start.offset);\n    }\n    if (\n      end.element.parentNode.nodeName === \"SPAN\" &&\n      start.element !== end.element\n    ) {\n      range.setEndAfter(end.element.parentNode);\n    } else {\n      range.setEnd(end.element, end.offset);\n    }\n    range.surroundContents(el);\n  }\n  // End any previous highlight before starting this one\n  $(el).stop(true, true).effect(\"highlight\", null, 1600);\n}\n\n// If this is the main Shiny window, wire up our custom message handler.\n// TODO-barret, this should work\n\nif (Shiny) {\n  Shiny.addCustomMessageHandler(\n    \"showcase-src\",\n    function (message: ShowcaseSrcMessage) {\n      if (message.srcref && message.srcfile) {\n        highlightSrcref(message.srcref, message.srcfile);\n      }\n    }\n  );\n}\n\nlet isCodeAbove = false;\nconst setCodePosition = function (above: boolean, animate: boolean) {\n  const animateCodeMs = animate ? animateMs : 1;\n\n  // set the source and targets for the tab move\n  const newHostElement = above\n    ? document.getElementById(\"showcase-sxs-code\")\n    : document.getElementById(\"showcase-code-inline\");\n  const currentHostElement = above\n    ? document.getElementById(\"showcase-code-inline\")\n    : document.getElementById(\"showcase-sxs-code\");\n\n  const metadataElement = document.getElementById(\"showcase-app-metadata\");\n\n  if (metadataElement === null) {\n    // if there's no app metadata, show and hide the entire well container\n    // when the code changes position\n    const wellElement = $(\"#showcase-well\");\n\n    if (above) {\n      wellElement.fadeOut(animateCodeMs);\n    } else {\n      wellElement.fadeIn(animateCodeMs);\n    }\n  }\n\n  // hide the new element before doing anything to it\n  $(newHostElement).hide();\n  $(currentHostElement).fadeOut(animateCodeMs, function () {\n    const tabs = document.getElementById(\"showcase-code-tabs\");\n\n    currentHostElement.removeChild(tabs);\n    newHostElement.appendChild(tabs);\n\n    // remove or set the height of the code\n    if (above) {\n      setCodeHeightFromDocHeight();\n    } else {\n      document.getElementById(\"showcase-code-content\").removeAttribute(\"style\");\n    }\n\n    $(newHostElement).fadeIn(animateCodeMs);\n    if (!above) {\n      // remove the applied width and zoom on the app container, and\n      // scroll smoothly down to the code's new home\n      document\n        .getElementById(\"showcase-app-container\")\n        .removeAttribute(\"style\");\n      if (animate)\n        $(document.body).animate({\n          scrollTop: $(newHostElement).offset().top,\n        });\n    }\n    // if there's a readme, move it either alongside the code or beneath\n    // the app\n    const readme = document.getElementById(\"readme-md\");\n\n    if (readme !== null) {\n      readme.parentElement.removeChild(readme);\n      if (above) {\n        currentHostElement.appendChild(readme);\n        $(currentHostElement).fadeIn(animateCodeMs);\n      } else\n        document.getElementById(\"showcase-app-metadata\").appendChild(readme);\n    }\n\n    // change the text on the toggle button to reflect the new state\n    document.getElementById(\"showcase-code-position-toggle\").innerHTML = above\n      ? '<i class=\"fa fa-level-down\"></i> show below'\n      : '<i class=\"fa fa-level-up\"></i> show with app';\n  });\n  if (above) {\n    $(document.body).animate({ scrollTop: 0 }, animateCodeMs);\n  }\n  isCodeAbove = above;\n  setAppCodeSxsWidths(above && animate);\n  $(window).trigger(\"resize\");\n};\n\nfunction setAppCodeSxsWidths(animate: boolean) {\n  const appTargetWidth = 960;\n  let appWidth = appTargetWidth;\n  let zoom = 1.0;\n  const totalWidth = document.getElementById(\"showcase-app-code\").offsetWidth;\n\n  if (totalWidth / 2 > appTargetWidth) {\n    // If the app can use only half the available space and still meet its\n    // target, take half the available space.\n    appWidth = totalWidth / 2;\n  } else if (totalWidth * 0.66 > appTargetWidth) {\n    // If the app can meet its target by taking up more space (up to 66%\n    // of its container), take up more space.\n    appWidth = 960;\n  } else {\n    // The space is too narrow for the app and code to live side-by-side\n    // in a friendly way. Keep the app at 2/3 of the space but scale it.\n    appWidth = totalWidth * 0.66;\n    zoom = appWidth / appTargetWidth;\n  }\n  const app = document.getElementById(\"showcase-app-container\");\n\n  $(app).animate(\n    {\n      width: appWidth + \"px\",\n      zoom: zoom * 100 + \"%\",\n    },\n    animate ? animateMs : 0\n  );\n}\n\nconst toggleCodePosition = function () {\n  setCodePosition(!isCodeAbove, true);\n};\n\n// if the browser is sized to wider than 1350px, show the code next to the\n// app by default\nconst setInitialCodePosition = function () {\n  if (document.body.offsetWidth > 1350) {\n    setCodePosition(true, false);\n  }\n};\n\n// make the code scrollable to about the height of the browser, less space\n// for the tabs\nfunction setCodeHeightFromDocHeight() {\n  document.getElementById(\"showcase-code-content\").style.height =\n    $(window).height() + \"px\";\n}\n\n// if there's a block of markdown content, render it to HTML\nfunction renderMarkdown() {\n  const mdContent = document.getElementById(\"showcase-markdown-content\");\n\n  if (mdContent !== null) {\n    // IE8 puts the content of <script> tags into innerHTML but\n    // not innerText\n    const content = mdContent.innerText || mdContent.innerHTML;\n\n    const showdownConverter = (window as any).Showdown\n      .converter as showdown.ConverterStatic;\n\n    document.getElementById(\"readme-md\").innerHTML =\n      new showdownConverter().makeHtml(content);\n  }\n}\n\n$(window).resize(function () {\n  if (isCodeAbove) {\n    setAppCodeSxsWidths(false);\n    setCodeHeightFromDocHeight();\n  }\n});\n\ndeclare global {\n  interface Window {\n    toggleCodePosition: () => void;\n  }\n}\nwindow.toggleCodePosition = toggleCodePosition;\n\n$(window).on(\"load\", setInitialCodePosition);\n$(window).on(\"load\", renderMarkdown);\n\nif (window.hljs) window.hljs.initHighlightingOnLoad();\n\nexport {};\n"],
  "mappings": "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",
  "names": ["animateMs", "findTextColPoint", "node", "col", "cols", "nchar", "ret", "findTextPoint", "el", "line", "newlines", "childId", "child", "newlinere", "match", "highlightSrcref", "srcref", "srcfile", "ref", "code", "start", "end", "range", "message", "isCodeAbove", "setCodePosition", "above", "animate", "animateCodeMs", "newHostElement", "currentHostElement", "wellElement", "tabs", "setCodeHeightFromDocHeight", "readme", "setAppCodeSxsWidths", "appWidth", "zoom", "totalWidth", "app", "toggleCodePosition", "setInitialCodePosition", "renderMarkdown", "mdContent", "content", "showdownConverter"]
}
